// Generated by delombok at Thu Jul 18 00:34:27 PDT 2024
package exchange.core2.core.processors.journaling;

import org.jetbrains.annotations.NotNull;
import java.util.NavigableMap;
import java.util.TreeMap;

public class SnapshotDescriptor implements Comparable<SnapshotDescriptor> {
    private final long snapshotId; // 0 means empty snapshot (clean start)
    // sequence when snapshot was made
    private final long seq;
    private final long timestampNs;
    // next and previous snapshots
    private final SnapshotDescriptor prev;
    private SnapshotDescriptor next = null; // TODO can be a list
    private final int numMatchingEngines;
    private final int numRiskEngines;
    // all journals based on this snapshot
    // mapping: startingSeq -> JournalDescriptor
    private final NavigableMap<Long, JournalDescriptor> journals = new TreeMap<>();

    /**
     * Create initial empty snapshot descriptor
     *
     * @param initialNumME - number of matching engine instances
     * @param initialNumRE - number of risk engine instances
     * @return new instance
     */
    public static SnapshotDescriptor createEmpty(int initialNumME, int initialNumRE) {
        return new SnapshotDescriptor(0, 0, 0, null, initialNumME, initialNumRE);
    }

    public SnapshotDescriptor createNext(long snapshotId, long seq, long timestampNs) {
        return new SnapshotDescriptor(snapshotId, seq, timestampNs, this, numMatchingEngines, numRiskEngines);
    }

    @Override
    public int compareTo(@NotNull SnapshotDescriptor o) {
        return Long.compare(this.seq, o.seq);
    }

    @java.lang.SuppressWarnings("all")
    public SnapshotDescriptor(final long snapshotId, final long seq, final long timestampNs, final SnapshotDescriptor prev, final int numMatchingEngines, final int numRiskEngines) {
        this.snapshotId = snapshotId;
        this.seq = seq;
        this.timestampNs = timestampNs;
        this.prev = prev;
        this.numMatchingEngines = numMatchingEngines;
        this.numRiskEngines = numRiskEngines;
    }

    @java.lang.SuppressWarnings("all")
    public long getSnapshotId() {
        return this.snapshotId;
    }

    @java.lang.SuppressWarnings("all")
    public long getSeq() {
        return this.seq;
    }

    @java.lang.SuppressWarnings("all")
    public long getTimestampNs() {
        return this.timestampNs;
    }

    @java.lang.SuppressWarnings("all")
    public SnapshotDescriptor getPrev() {
        return this.prev;
    }

    @java.lang.SuppressWarnings("all")
    public SnapshotDescriptor getNext() {
        return this.next;
    }

    @java.lang.SuppressWarnings("all")
    public int getNumMatchingEngines() {
        return this.numMatchingEngines;
    }

    @java.lang.SuppressWarnings("all")
    public int getNumRiskEngines() {
        return this.numRiskEngines;
    }

    @java.lang.SuppressWarnings("all")
    public NavigableMap<Long, JournalDescriptor> getJournals() {
        return this.journals;
    }

    @java.lang.SuppressWarnings("all")
    public void setNext(final SnapshotDescriptor next) {
        this.next = next;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof SnapshotDescriptor)) return false;
        final SnapshotDescriptor other = (SnapshotDescriptor) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (this.getSnapshotId() != other.getSnapshotId()) return false;
        if (this.getSeq() != other.getSeq()) return false;
        if (this.getTimestampNs() != other.getTimestampNs()) return false;
        final java.lang.Object this$prev = this.getPrev();
        final java.lang.Object other$prev = other.getPrev();
        if (this$prev == null ? other$prev != null : !this$prev.equals(other$prev)) return false;
        final java.lang.Object this$next = this.getNext();
        final java.lang.Object other$next = other.getNext();
        if (this$next == null ? other$next != null : !this$next.equals(other$next)) return false;
        if (this.getNumMatchingEngines() != other.getNumMatchingEngines()) return false;
        if (this.getNumRiskEngines() != other.getNumRiskEngines()) return false;
        final java.lang.Object this$journals = this.getJournals();
        final java.lang.Object other$journals = other.getJournals();
        if (this$journals == null ? other$journals != null : !this$journals.equals(other$journals)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof SnapshotDescriptor;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final long $snapshotId = this.getSnapshotId();
        result = result * PRIME + (int) ($snapshotId >>> 32 ^ $snapshotId);
        final long $seq = this.getSeq();
        result = result * PRIME + (int) ($seq >>> 32 ^ $seq);
        final long $timestampNs = this.getTimestampNs();
        result = result * PRIME + (int) ($timestampNs >>> 32 ^ $timestampNs);
        final java.lang.Object $prev = this.getPrev();
        result = result * PRIME + ($prev == null ? 43 : $prev.hashCode());
        final java.lang.Object $next = this.getNext();
        result = result * PRIME + ($next == null ? 43 : $next.hashCode());
        result = result * PRIME + this.getNumMatchingEngines();
        result = result * PRIME + this.getNumRiskEngines();
        final java.lang.Object $journals = this.getJournals();
        result = result * PRIME + ($journals == null ? 43 : $journals.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
        return "SnapshotDescriptor(snapshotId=" + this.getSnapshotId() + ", seq=" + this.getSeq() + ", timestampNs=" + this.getTimestampNs() + ", prev=" + this.getPrev() + ", next=" + this.getNext() + ", numMatchingEngines=" + this.getNumMatchingEngines() + ", numRiskEngines=" + this.getNumRiskEngines() + ", journals=" + this.getJournals() + ")";
    }
}
