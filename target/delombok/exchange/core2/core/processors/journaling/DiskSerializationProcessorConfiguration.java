// Generated by delombok at Tue Jul 16 22:07:06 PDT 2024
package exchange.core2.core.processors.journaling;

import net.jpountz.lz4.LZ4Compressor;
import net.jpountz.lz4.LZ4Factory;
import java.util.function.Supplier;

public class DiskSerializationProcessorConfiguration {
    public static final String DEFAULT_FOLDER = "./dumps";
    private static final long ONE_MEGABYTE = 1024 * 1024;
    public static final Supplier<LZ4Compressor> LZ4_FAST = () -> LZ4Factory.fastestInstance().fastCompressor();
    public static final Supplier<LZ4Compressor> LZ4_HIGH = () -> LZ4Factory.fastestInstance().highCompressor();
    private final String storageFolder;
    // -------- snapshot settings ---------------
    // Snapshots LZ4 compressor
    // note: using LZ4 HIGH will require about twice more time
    private final Supplier<LZ4Compressor> snapshotLz4CompressorFactory;
    // -------- journal settings ---------------
    private final long journalFileMaxSize;
    private final int journalBufferSize;
    // use LZ4 compression if batch size (in bytes) exceeds this value for batches threshold
    // average batch size depends on traffic and disk write delay and can reach up to 20-100 kilobytes (3M TPS and 0.15ms disk write delay)
    // under moderate load for single messages compression is never used
    private final int journalBatchCompressThreshold;
    // Journals LZ4 compressor
    // note: using LZ4 HIGH is not recommended because of very high impact on throughput
    private final Supplier<LZ4Compressor> journalLz4CompressorFactory;

    public static DiskSerializationProcessorConfiguration createDefaultConfig() {
        return  // 256 KB - TODO calculate based on ringBufferSize
        DiskSerializationProcessorConfiguration.builder().storageFolder(DEFAULT_FOLDER).snapshotLz4CompressorFactory(LZ4_FAST).journalFileMaxSize(4000 * ONE_MEGABYTE).journalBufferSize(256 * 1024).journalBatchCompressThreshold(2048).journalLz4CompressorFactory(LZ4_FAST).build();
    }


    @java.lang.SuppressWarnings("all")
    public static class DiskSerializationProcessorConfigurationBuilder {
        @java.lang.SuppressWarnings("all")
        private String storageFolder;
        @java.lang.SuppressWarnings("all")
        private Supplier<LZ4Compressor> snapshotLz4CompressorFactory;
        @java.lang.SuppressWarnings("all")
        private long journalFileMaxSize;
        @java.lang.SuppressWarnings("all")
        private int journalBufferSize;
        @java.lang.SuppressWarnings("all")
        private int journalBatchCompressThreshold;
        @java.lang.SuppressWarnings("all")
        private Supplier<LZ4Compressor> journalLz4CompressorFactory;

        @java.lang.SuppressWarnings("all")
        DiskSerializationProcessorConfigurationBuilder() {
        }

        @java.lang.SuppressWarnings("all")
        public DiskSerializationProcessorConfiguration.DiskSerializationProcessorConfigurationBuilder storageFolder(final String storageFolder) {
            this.storageFolder = storageFolder;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public DiskSerializationProcessorConfiguration.DiskSerializationProcessorConfigurationBuilder snapshotLz4CompressorFactory(final Supplier<LZ4Compressor> snapshotLz4CompressorFactory) {
            this.snapshotLz4CompressorFactory = snapshotLz4CompressorFactory;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public DiskSerializationProcessorConfiguration.DiskSerializationProcessorConfigurationBuilder journalFileMaxSize(final long journalFileMaxSize) {
            this.journalFileMaxSize = journalFileMaxSize;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public DiskSerializationProcessorConfiguration.DiskSerializationProcessorConfigurationBuilder journalBufferSize(final int journalBufferSize) {
            this.journalBufferSize = journalBufferSize;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public DiskSerializationProcessorConfiguration.DiskSerializationProcessorConfigurationBuilder journalBatchCompressThreshold(final int journalBatchCompressThreshold) {
            this.journalBatchCompressThreshold = journalBatchCompressThreshold;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public DiskSerializationProcessorConfiguration.DiskSerializationProcessorConfigurationBuilder journalLz4CompressorFactory(final Supplier<LZ4Compressor> journalLz4CompressorFactory) {
            this.journalLz4CompressorFactory = journalLz4CompressorFactory;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public DiskSerializationProcessorConfiguration build() {
            return new DiskSerializationProcessorConfiguration(this.storageFolder, this.snapshotLz4CompressorFactory, this.journalFileMaxSize, this.journalBufferSize, this.journalBatchCompressThreshold, this.journalLz4CompressorFactory);
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        public java.lang.String toString() {
            return "DiskSerializationProcessorConfiguration.DiskSerializationProcessorConfigurationBuilder(storageFolder=" + this.storageFolder + ", snapshotLz4CompressorFactory=" + this.snapshotLz4CompressorFactory + ", journalFileMaxSize=" + this.journalFileMaxSize + ", journalBufferSize=" + this.journalBufferSize + ", journalBatchCompressThreshold=" + this.journalBatchCompressThreshold + ", journalLz4CompressorFactory=" + this.journalLz4CompressorFactory + ")";
        }
    }

    @java.lang.SuppressWarnings("all")
    public static DiskSerializationProcessorConfiguration.DiskSerializationProcessorConfigurationBuilder builder() {
        return new DiskSerializationProcessorConfiguration.DiskSerializationProcessorConfigurationBuilder();
    }

    @java.lang.SuppressWarnings("all")
    public DiskSerializationProcessorConfiguration(final String storageFolder, final Supplier<LZ4Compressor> snapshotLz4CompressorFactory, final long journalFileMaxSize, final int journalBufferSize, final int journalBatchCompressThreshold, final Supplier<LZ4Compressor> journalLz4CompressorFactory) {
        this.storageFolder = storageFolder;
        this.snapshotLz4CompressorFactory = snapshotLz4CompressorFactory;
        this.journalFileMaxSize = journalFileMaxSize;
        this.journalBufferSize = journalBufferSize;
        this.journalBatchCompressThreshold = journalBatchCompressThreshold;
        this.journalLz4CompressorFactory = journalLz4CompressorFactory;
    }

    @java.lang.SuppressWarnings("all")
    public String getStorageFolder() {
        return this.storageFolder;
    }

    @java.lang.SuppressWarnings("all")
    public Supplier<LZ4Compressor> getSnapshotLz4CompressorFactory() {
        return this.snapshotLz4CompressorFactory;
    }

    @java.lang.SuppressWarnings("all")
    public long getJournalFileMaxSize() {
        return this.journalFileMaxSize;
    }

    @java.lang.SuppressWarnings("all")
    public int getJournalBufferSize() {
        return this.journalBufferSize;
    }

    @java.lang.SuppressWarnings("all")
    public int getJournalBatchCompressThreshold() {
        return this.journalBatchCompressThreshold;
    }

    @java.lang.SuppressWarnings("all")
    public Supplier<LZ4Compressor> getJournalLz4CompressorFactory() {
        return this.journalLz4CompressorFactory;
    }
}
