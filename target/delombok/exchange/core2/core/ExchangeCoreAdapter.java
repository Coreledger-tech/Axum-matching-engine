// Generated by delombok at Mon Jul 15 23:51:50 PDT 2024
package exchange.core2.core;

import exchange.core2.core.common.*;
import exchange.core2.core.common.api.*;
import exchange.core2.core.common.api.binary.BatchAddSymbolsCommand;
import exchange.core2.core.common.api.reports.SingleUserReportQuery;
import exchange.core2.core.common.api.reports.SingleUserReportResult;
import exchange.core2.core.common.api.reports.TotalCurrencyBalanceReportQuery;
import exchange.core2.core.common.api.reports.TotalCurrencyBalanceReportResult;
import exchange.core2.core.common.cmd.CommandResultCode;
import exchange.core2.core.common.config.ExchangeConfiguration;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Future;
import exchange.core2.core.ExchangeApi;
import exchange.core2.core.ExchangeCore;
import exchange.core2.core.IEventsHandler;
import exchange.core2.core.SimpleEventsProcessor;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Future;

public class ExchangeCoreAdapter {
    @java.lang.SuppressWarnings("all")
    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(ExchangeCoreAdapter.class);

    public void sampleTest() throws Exception {
        // simple async events handler
        SimpleEventsProcessor eventsProcessor = new SimpleEventsProcessor(new IEventsHandler() {
            @Override
            public void tradeEvent(TradeEvent tradeEvent) {
                System.out.println("Trade event: " + tradeEvent);
            }
            @Override
            public void reduceEvent(ReduceEvent reduceEvent) {
                System.out.println("Reduce event: " + reduceEvent);
            }
            @Override
            public void rejectEvent(RejectEvent rejectEvent) {
                System.out.println("Reject event: " + rejectEvent);
            }
            @Override
            public void commandResult(ApiCommandResult commandResult) {
                System.out.println("Command result: " + commandResult);
            }
            @Override
            public void orderBook(OrderBook orderBook) {
                System.out.println("OrderBook event: " + orderBook);
            }
        });
        // default exchange configuration
        ExchangeConfiguration conf = ExchangeConfiguration.defaultBuilder().build();
        // build exchange core
        ExchangeCore exchangeCore = ExchangeCore.builder().resultsConsumer(eventsProcessor).exchangeConfiguration(conf).build();
        // start up disruptor threads
        exchangeCore.startup();
        // get exchange API for publishing commands
        ExchangeApi api = exchangeCore.getApi();
        // currency code constants
        final int currencyCodeXbt = 11;
        final int currencyCodeLtc = 15;
        // symbol constants
        final int symbolXbtLtc = 241;
        Future<CommandResultCode> future;
        // create symbol specification and publish it
        CoreSymbolSpecification symbolSpecXbtLtc =  // symbol id
        // base = satoshi (1E-8)
        // quote = litoshi (1E-8)
        // 1 lot = 1M satoshi (0.01 BTC)
        // 1 price step = 10K litoshi
        // taker fee 1900 litoshi per 1 lot
        // maker fee 700 litoshi per 1 lot
        CoreSymbolSpecification.builder().symbolId(symbolXbtLtc).type(SymbolType.CURRENCY_EXCHANGE_PAIR).baseCurrency(currencyCodeXbt).quoteCurrency(currencyCodeLtc).baseScaleK(1000000L).quoteScaleK(10000L).takerFee(1900L).makerFee(700L).build();
        future = api.submitBinaryDataAsync(new BatchAddSymbolsCommand(symbolSpecXbtLtc));
        System.out.println("BatchAddSymbolsCommand result: " + future.get());
        // create user uid=301
        future = api.submitCommandAsync(ApiAddUser.builder().uid(301L).build());
        System.out.println("ApiAddUser 1 result: " + future.get());
        // create user uid=302
        future = api.submitCommandAsync(ApiAddUser.builder().uid(302L).build());
        System.out.println("ApiAddUser 2 result: " + future.get());
        // first user deposits 20 LTC
        future = api.submitCommandAsync(ApiAdjustUserBalance.builder().uid(301L).currency(currencyCodeLtc).amount(2000000000L).transactionId(1L).build());
        System.out.println("ApiAdjustUserBalance 1 result: " + future.get());
        // second user deposits 0.10 BTC
        future = api.submitCommandAsync(ApiAdjustUserBalance.builder().uid(302L).currency(currencyCodeXbt).amount(10000000L).transactionId(2L).build());
        System.out.println("ApiAdjustUserBalance 2 result: " + future.get());
        // first user places Good-till-Cancel Bid order
        // he assumes BTCLTC exchange rate 154 LTC for 1 BTC
        // bid price for 1 lot (0.01BTC) is 1.54 LTC => 1_5400_0000 litoshi => 10K * 15_400 (in price steps)
        future = api.submitCommandAsync( // can move bid order up to the 1.56 LTC, without replacing it
        // order size is 12 lots
        // Good-till-Cancel
        ApiPlaceOrder.builder().uid(301L).orderId(5001L).price(15400L).reservePrice(15600L).size(12L).action(OrderAction.BID).orderType(OrderType.GTC).symbol(symbolXbtLtc).build());
        System.out.println("ApiPlaceOrder 1 result: " + future.get());
        // second user places Immediate-or-Cancel Ask (Sell) order
        // he assumes wost rate to sell 152.5 LTC for 1 BTC
        future = api.submitCommandAsync( // order size is 10 lots
        // Immediate-or-Cancel
        ApiPlaceOrder.builder().uid(302L).orderId(5002L).price(15250L).size(10L).action(OrderAction.ASK).orderType(OrderType.IOC).symbol(symbolXbtLtc).build());
        System.out.println("ApiPlaceOrder 2 result: " + future.get());
        // request order book
        CompletableFuture<L2MarketData> orderBookFuture = api.requestOrderBookAsync(symbolXbtLtc, 10);
        System.out.println("ApiOrderBookRequest result: " + orderBookFuture.get());
        // first user moves remaining order to price 1.53 LTC
        future = api.submitCommandAsync(ApiMoveOrder.builder().uid(301L).orderId(5001L).newPrice(15300L).symbol(symbolXbtLtc).build());
        System.out.println("ApiMoveOrder 2 result: " + future.get());
        // first user cancel remaining order
        future = api.submitCommandAsync(ApiCancelOrder.builder().uid(301L).orderId(5001L).symbol(symbolXbtLtc).build());
        System.out.println("ApiCancelOrder 2 result: " + future.get());
        // check balances
        Future<SingleUserReportResult> report1 = api.processReport(new SingleUserReportQuery(301), 0);
        System.out.println("SingleUserReportQuery 1 accounts: " + report1.get().getAccounts());
        Future<SingleUserReportResult> report2 = api.processReport(new SingleUserReportQuery(302), 0);
        System.out.println("SingleUserReportQuery 2 accounts: " + report2.get().getAccounts());
        // first user withdraws 0.10 BTC
        future = api.submitCommandAsync(ApiAdjustUserBalance.builder().uid(301L).currency(currencyCodeXbt).amount(-10000000L).transactionId(3L).build());
        System.out.println("ApiAdjustUserBalance 1 result: " + future.get());
        // check fees collected
        Future<TotalCurrencyBalanceReportResult> totalsReport = api.processReport(new TotalCurrencyBalanceReportQuery(), 0);
        System.out.println("LTC fees collected: " + totalsReport.get().getFees().get(currencyCodeLtc));
    }
}
