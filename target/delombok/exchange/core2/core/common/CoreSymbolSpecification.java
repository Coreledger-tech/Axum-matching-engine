// Generated by delombok at Thu Jul 18 18:47:43 PDT 2024
/*
 * Copyright 2019 Maksim Zheravin
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package exchange.core2.core.common;

import lombok.*;
import net.openhft.chronicle.bytes.BytesIn;
import net.openhft.chronicle.bytes.BytesOut;
import net.openhft.chronicle.bytes.WriteBytesMarshallable;
import java.util.Objects;

public final class CoreSymbolSpecification implements WriteBytesMarshallable, StateHash {
    public final int symbolId;
    @NonNull
    public final SymbolType type;
    // currency pair specification
    public final int baseCurrency; // base currency
    public final int quoteCurrency; // quote/counter currency (OR futures contract currency)
    public final long baseScaleK; // base currency amount multiplier (lot size in base currency units)
    public final long quoteScaleK; // quote currency amount multiplier (step size in quote currency units)
    // fees per lot in quote? currency units
    public final long takerFee; // TODO check invariant: taker fee is not less than maker fee
    public final long makerFee;
    // margin settings (for type=FUTURES_CONTRACT only)
    public final long marginBuy; // buy margin (quote currency)
    public final long marginSell; // sell margin (quote currency)

    public CoreSymbolSpecification(BytesIn bytes) {
        this.symbolId = bytes.readInt();
        this.type = SymbolType.of(bytes.readByte());
        this.baseCurrency = bytes.readInt();
        this.quoteCurrency = bytes.readInt();
        this.baseScaleK = bytes.readLong();
        this.quoteScaleK = bytes.readLong();
        this.takerFee = bytes.readLong();
        this.makerFee = bytes.readLong();
        this.marginBuy = bytes.readLong();
        this.marginSell = bytes.readLong();
    }

/* NOT SUPPORTED YET:

//    order book limits -- for FUTURES only
//    public final long highLimit;
//    public final long lowLimit;

//    swaps -- not by
//    public final long longSwap;
//    public final long shortSwap;

// activity (inactive, active, expired)

  */
    @Override
    public void writeMarshallable(BytesOut bytes) {
        bytes.writeInt(symbolId);
        bytes.writeByte(type.getCode());
        bytes.writeInt(baseCurrency);
        bytes.writeInt(quoteCurrency);
        bytes.writeLong(baseScaleK);
        bytes.writeLong(quoteScaleK);
        bytes.writeLong(takerFee);
        bytes.writeLong(makerFee);
        bytes.writeLong(marginBuy);
        bytes.writeLong(marginSell);
    }

    @Override
    public int stateHash() {
        return Objects.hash(symbolId, type.getCode(), baseCurrency, quoteCurrency, baseScaleK, quoteScaleK, takerFee, makerFee, marginBuy, marginSell);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        CoreSymbolSpecification that = (CoreSymbolSpecification) o;
        return symbolId == that.symbolId && baseCurrency == that.baseCurrency && quoteCurrency == that.quoteCurrency && baseScaleK == that.baseScaleK && quoteScaleK == that.quoteScaleK && takerFee == that.takerFee && makerFee == that.makerFee && marginBuy == that.marginBuy && marginSell == that.marginSell && type == that.type;
    }


    @java.lang.SuppressWarnings("all")
    public static class CoreSymbolSpecificationBuilder {
        @java.lang.SuppressWarnings("all")
        private int symbolId;
        @java.lang.SuppressWarnings("all")
        private SymbolType type;
        @java.lang.SuppressWarnings("all")
        private int baseCurrency;
        @java.lang.SuppressWarnings("all")
        private int quoteCurrency;
        @java.lang.SuppressWarnings("all")
        private long baseScaleK;
        @java.lang.SuppressWarnings("all")
        private long quoteScaleK;
        @java.lang.SuppressWarnings("all")
        private long takerFee;
        @java.lang.SuppressWarnings("all")
        private long makerFee;
        @java.lang.SuppressWarnings("all")
        private long marginBuy;
        @java.lang.SuppressWarnings("all")
        private long marginSell;

        @java.lang.SuppressWarnings("all")
        CoreSymbolSpecificationBuilder() {
        }

        @java.lang.SuppressWarnings("all")
        public CoreSymbolSpecification.CoreSymbolSpecificationBuilder symbolId(final int symbolId) {
            this.symbolId = symbolId;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public CoreSymbolSpecification.CoreSymbolSpecificationBuilder type(@NonNull final SymbolType type) {
            if (type == null) {
                throw new java.lang.NullPointerException("type is marked non-null but is null");
            }
            this.type = type;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public CoreSymbolSpecification.CoreSymbolSpecificationBuilder baseCurrency(final int baseCurrency) {
            this.baseCurrency = baseCurrency;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public CoreSymbolSpecification.CoreSymbolSpecificationBuilder quoteCurrency(final int quoteCurrency) {
            this.quoteCurrency = quoteCurrency;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public CoreSymbolSpecification.CoreSymbolSpecificationBuilder baseScaleK(final long baseScaleK) {
            this.baseScaleK = baseScaleK;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public CoreSymbolSpecification.CoreSymbolSpecificationBuilder quoteScaleK(final long quoteScaleK) {
            this.quoteScaleK = quoteScaleK;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public CoreSymbolSpecification.CoreSymbolSpecificationBuilder takerFee(final long takerFee) {
            this.takerFee = takerFee;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public CoreSymbolSpecification.CoreSymbolSpecificationBuilder makerFee(final long makerFee) {
            this.makerFee = makerFee;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public CoreSymbolSpecification.CoreSymbolSpecificationBuilder marginBuy(final long marginBuy) {
            this.marginBuy = marginBuy;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public CoreSymbolSpecification.CoreSymbolSpecificationBuilder marginSell(final long marginSell) {
            this.marginSell = marginSell;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public CoreSymbolSpecification build() {
            return new CoreSymbolSpecification(this.symbolId, this.type, this.baseCurrency, this.quoteCurrency, this.baseScaleK, this.quoteScaleK, this.takerFee, this.makerFee, this.marginBuy, this.marginSell);
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        public java.lang.String toString() {
            return "CoreSymbolSpecification.CoreSymbolSpecificationBuilder(symbolId=" + this.symbolId + ", type=" + this.type + ", baseCurrency=" + this.baseCurrency + ", quoteCurrency=" + this.quoteCurrency + ", baseScaleK=" + this.baseScaleK + ", quoteScaleK=" + this.quoteScaleK + ", takerFee=" + this.takerFee + ", makerFee=" + this.makerFee + ", marginBuy=" + this.marginBuy + ", marginSell=" + this.marginSell + ")";
        }
    }

    @java.lang.SuppressWarnings("all")
    public static CoreSymbolSpecification.CoreSymbolSpecificationBuilder builder() {
        return new CoreSymbolSpecification.CoreSymbolSpecificationBuilder();
    }

    @java.lang.SuppressWarnings("all")
    public CoreSymbolSpecification(final int symbolId, @NonNull final SymbolType type, final int baseCurrency, final int quoteCurrency, final long baseScaleK, final long quoteScaleK, final long takerFee, final long makerFee, final long marginBuy, final long marginSell) {
        if (type == null) {
            throw new java.lang.NullPointerException("type is marked non-null but is null");
        }
        this.symbolId = symbolId;
        this.type = type;
        this.baseCurrency = baseCurrency;
        this.quoteCurrency = quoteCurrency;
        this.baseScaleK = baseScaleK;
        this.quoteScaleK = quoteScaleK;
        this.takerFee = takerFee;
        this.makerFee = makerFee;
        this.marginBuy = marginBuy;
        this.marginSell = marginSell;
    }

    @java.lang.SuppressWarnings("all")
    public int getSymbolId() {
        return this.symbolId;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public SymbolType getType() {
        return this.type;
    }

    @java.lang.SuppressWarnings("all")
    public int getBaseCurrency() {
        return this.baseCurrency;
    }

    @java.lang.SuppressWarnings("all")
    public int getQuoteCurrency() {
        return this.quoteCurrency;
    }

    @java.lang.SuppressWarnings("all")
    public long getBaseScaleK() {
        return this.baseScaleK;
    }

    @java.lang.SuppressWarnings("all")
    public long getQuoteScaleK() {
        return this.quoteScaleK;
    }

    @java.lang.SuppressWarnings("all")
    public long getTakerFee() {
        return this.takerFee;
    }

    @java.lang.SuppressWarnings("all")
    public long getMakerFee() {
        return this.makerFee;
    }

    @java.lang.SuppressWarnings("all")
    public long getMarginBuy() {
        return this.marginBuy;
    }

    @java.lang.SuppressWarnings("all")
    public long getMarginSell() {
        return this.marginSell;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
        return "CoreSymbolSpecification(symbolId=" + this.getSymbolId() + ", type=" + this.getType() + ", baseCurrency=" + this.getBaseCurrency() + ", quoteCurrency=" + this.getQuoteCurrency() + ", baseScaleK=" + this.getBaseScaleK() + ", quoteScaleK=" + this.getQuoteScaleK() + ", takerFee=" + this.getTakerFee() + ", makerFee=" + this.getMakerFee() + ", marginBuy=" + this.getMarginBuy() + ", marginSell=" + this.getMarginSell() + ")";
    }
}
