// Generated by delombok at Mon Jul 15 23:51:50 PDT 2024
/*
 * Copyright 2019 Maksim Zheravin
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package exchange.core2.core.common.api;

import exchange.core2.core.common.api.binary.BinaryDataCommand;

public final class ApiBinaryDataCommand extends ApiCommand {
    // transfer unique id
    // can be constant unless going to push data concurrently
    public final int transferId;
    // serializable object
    public final BinaryDataCommand data;

    @Override
    public String toString() {
        return "[BINARY_DATA tid=" + transferId + " data=" + data + "]";
    }


    @java.lang.SuppressWarnings("all")
    public static class ApiBinaryDataCommandBuilder {
        @java.lang.SuppressWarnings("all")
        private int transferId;
        @java.lang.SuppressWarnings("all")
        private BinaryDataCommand data;

        @java.lang.SuppressWarnings("all")
        ApiBinaryDataCommandBuilder() {
        }

        @java.lang.SuppressWarnings("all")
        public ApiBinaryDataCommand.ApiBinaryDataCommandBuilder transferId(final int transferId) {
            this.transferId = transferId;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public ApiBinaryDataCommand.ApiBinaryDataCommandBuilder data(final BinaryDataCommand data) {
            this.data = data;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public ApiBinaryDataCommand build() {
            return new ApiBinaryDataCommand(this.transferId, this.data);
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        public java.lang.String toString() {
            return "ApiBinaryDataCommand.ApiBinaryDataCommandBuilder(transferId=" + this.transferId + ", data=" + this.data + ")";
        }
    }

    @java.lang.SuppressWarnings("all")
    public static ApiBinaryDataCommand.ApiBinaryDataCommandBuilder builder() {
        return new ApiBinaryDataCommand.ApiBinaryDataCommandBuilder();
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof ApiBinaryDataCommand)) return false;
        final ApiBinaryDataCommand other = (ApiBinaryDataCommand) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (this.transferId != other.transferId) return false;
        final java.lang.Object this$data = this.data;
        final java.lang.Object other$data = other.data;
        if (this$data == null ? other$data != null : !this$data.equals(other$data)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof ApiBinaryDataCommand;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + this.transferId;
        final java.lang.Object $data = this.data;
        result = result * PRIME + ($data == null ? 43 : $data.hashCode());
        return result;
    }

    @java.lang.SuppressWarnings("all")
    public ApiBinaryDataCommand(final int transferId, final BinaryDataCommand data) {
        this.transferId = transferId;
        this.data = data;
    }
}
