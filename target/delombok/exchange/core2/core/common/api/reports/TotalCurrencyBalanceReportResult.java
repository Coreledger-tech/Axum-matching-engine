// Generated by delombok at Thu Nov 14 21:27:17 PST 2024
/*
 * Copyright 2019 Maksim Zheravin
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package exchange.core2.core.common.api.reports;

import exchange.core2.core.utils.SerializationUtils;
import net.openhft.chronicle.bytes.BytesIn;
import net.openhft.chronicle.bytes.BytesOut;
import org.eclipse.collections.impl.map.mutable.primitive.IntLongHashMap;
import java.util.stream.Stream;

public final class TotalCurrencyBalanceReportResult implements ReportResult {
    // currency -> balance
    private final IntLongHashMap accountBalances;
    private final IntLongHashMap fees;
    private final IntLongHashMap adjustments;
    private final IntLongHashMap suspends;
    private final IntLongHashMap ordersBalances;
    // symbol -> volume
    // We have to keep shorts and longs separately because for multi-core processing different risk engine instances will give non-matching results.
    // They should match when aggregated though.
    private final IntLongHashMap openInterestLong;
    private final IntLongHashMap openInterestShort;

    public static TotalCurrencyBalanceReportResult createEmpty() {
        return new TotalCurrencyBalanceReportResult(null, null, null, null, null, null, null);
    }

    public static TotalCurrencyBalanceReportResult ofOrderBalances(final IntLongHashMap currencyBalance) {
        return new TotalCurrencyBalanceReportResult(null, null, null, null, currencyBalance, null, null);
    }

    private TotalCurrencyBalanceReportResult(final BytesIn bytesIn) {
        this.accountBalances = SerializationUtils.readNullable(bytesIn, SerializationUtils::readIntLongHashMap);
        this.fees = SerializationUtils.readNullable(bytesIn, SerializationUtils::readIntLongHashMap);
        this.adjustments = SerializationUtils.readNullable(bytesIn, SerializationUtils::readIntLongHashMap);
        this.suspends = SerializationUtils.readNullable(bytesIn, SerializationUtils::readIntLongHashMap);
        this.ordersBalances = SerializationUtils.readNullable(bytesIn, SerializationUtils::readIntLongHashMap);
        this.openInterestLong = SerializationUtils.readNullable(bytesIn, SerializationUtils::readIntLongHashMap);
        this.openInterestShort = SerializationUtils.readNullable(bytesIn, SerializationUtils::readIntLongHashMap);
    }

    @Override
    public void writeMarshallable(final BytesOut bytes) {
        SerializationUtils.marshallNullable(accountBalances, bytes, SerializationUtils::marshallIntLongHashMap);
        SerializationUtils.marshallNullable(fees, bytes, SerializationUtils::marshallIntLongHashMap);
        SerializationUtils.marshallNullable(adjustments, bytes, SerializationUtils::marshallIntLongHashMap);
        SerializationUtils.marshallNullable(suspends, bytes, SerializationUtils::marshallIntLongHashMap);
        SerializationUtils.marshallNullable(ordersBalances, bytes, SerializationUtils::marshallIntLongHashMap);
        SerializationUtils.marshallNullable(openInterestLong, bytes, SerializationUtils::marshallIntLongHashMap);
        SerializationUtils.marshallNullable(openInterestShort, bytes, SerializationUtils::marshallIntLongHashMap);
    }

    public IntLongHashMap getGlobalBalancesSum() {
        return SerializationUtils.mergeSum(accountBalances, ordersBalances, fees, adjustments, suspends);
    }

    public IntLongHashMap getClientsBalancesSum() {
        return SerializationUtils.mergeSum(accountBalances, ordersBalances, suspends);
    }

    public boolean isGlobalBalancesAllZero() {
        return getGlobalBalancesSum().allSatisfy(amount -> amount == 0L);
    }

    public static TotalCurrencyBalanceReportResult merge(final Stream<BytesIn> pieces) {
        return pieces.map(TotalCurrencyBalanceReportResult::new).reduce(TotalCurrencyBalanceReportResult.createEmpty(), (a, b) -> new TotalCurrencyBalanceReportResult(SerializationUtils.mergeSum(a.accountBalances, b.accountBalances), SerializationUtils.mergeSum(a.fees, b.fees), SerializationUtils.mergeSum(a.adjustments, b.adjustments), SerializationUtils.mergeSum(a.suspends, b.suspends), SerializationUtils.mergeSum(a.ordersBalances, b.ordersBalances), SerializationUtils.mergeSum(a.openInterestLong, b.openInterestLong), SerializationUtils.mergeSum(a.openInterestShort, b.openInterestShort)));
    }

    @java.lang.SuppressWarnings("all")
    public TotalCurrencyBalanceReportResult(final IntLongHashMap accountBalances, final IntLongHashMap fees, final IntLongHashMap adjustments, final IntLongHashMap suspends, final IntLongHashMap ordersBalances, final IntLongHashMap openInterestLong, final IntLongHashMap openInterestShort) {
        this.accountBalances = accountBalances;
        this.fees = fees;
        this.adjustments = adjustments;
        this.suspends = suspends;
        this.ordersBalances = ordersBalances;
        this.openInterestLong = openInterestLong;
        this.openInterestShort = openInterestShort;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof TotalCurrencyBalanceReportResult)) return false;
        final TotalCurrencyBalanceReportResult other = (TotalCurrencyBalanceReportResult) o;
        final java.lang.Object this$accountBalances = this.getAccountBalances();
        final java.lang.Object other$accountBalances = other.getAccountBalances();
        if (this$accountBalances == null ? other$accountBalances != null : !this$accountBalances.equals(other$accountBalances)) return false;
        final java.lang.Object this$fees = this.getFees();
        final java.lang.Object other$fees = other.getFees();
        if (this$fees == null ? other$fees != null : !this$fees.equals(other$fees)) return false;
        final java.lang.Object this$adjustments = this.getAdjustments();
        final java.lang.Object other$adjustments = other.getAdjustments();
        if (this$adjustments == null ? other$adjustments != null : !this$adjustments.equals(other$adjustments)) return false;
        final java.lang.Object this$suspends = this.getSuspends();
        final java.lang.Object other$suspends = other.getSuspends();
        if (this$suspends == null ? other$suspends != null : !this$suspends.equals(other$suspends)) return false;
        final java.lang.Object this$ordersBalances = this.getOrdersBalances();
        final java.lang.Object other$ordersBalances = other.getOrdersBalances();
        if (this$ordersBalances == null ? other$ordersBalances != null : !this$ordersBalances.equals(other$ordersBalances)) return false;
        final java.lang.Object this$openInterestLong = this.getOpenInterestLong();
        final java.lang.Object other$openInterestLong = other.getOpenInterestLong();
        if (this$openInterestLong == null ? other$openInterestLong != null : !this$openInterestLong.equals(other$openInterestLong)) return false;
        final java.lang.Object this$openInterestShort = this.getOpenInterestShort();
        final java.lang.Object other$openInterestShort = other.getOpenInterestShort();
        if (this$openInterestShort == null ? other$openInterestShort != null : !this$openInterestShort.equals(other$openInterestShort)) return false;
        return true;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $accountBalances = this.getAccountBalances();
        result = result * PRIME + ($accountBalances == null ? 43 : $accountBalances.hashCode());
        final java.lang.Object $fees = this.getFees();
        result = result * PRIME + ($fees == null ? 43 : $fees.hashCode());
        final java.lang.Object $adjustments = this.getAdjustments();
        result = result * PRIME + ($adjustments == null ? 43 : $adjustments.hashCode());
        final java.lang.Object $suspends = this.getSuspends();
        result = result * PRIME + ($suspends == null ? 43 : $suspends.hashCode());
        final java.lang.Object $ordersBalances = this.getOrdersBalances();
        result = result * PRIME + ($ordersBalances == null ? 43 : $ordersBalances.hashCode());
        final java.lang.Object $openInterestLong = this.getOpenInterestLong();
        result = result * PRIME + ($openInterestLong == null ? 43 : $openInterestLong.hashCode());
        final java.lang.Object $openInterestShort = this.getOpenInterestShort();
        result = result * PRIME + ($openInterestShort == null ? 43 : $openInterestShort.hashCode());
        return result;
    }

    @java.lang.SuppressWarnings("all")
    public IntLongHashMap getAccountBalances() {
        return this.accountBalances;
    }

    @java.lang.SuppressWarnings("all")
    public IntLongHashMap getFees() {
        return this.fees;
    }

    @java.lang.SuppressWarnings("all")
    public IntLongHashMap getAdjustments() {
        return this.adjustments;
    }

    @java.lang.SuppressWarnings("all")
    public IntLongHashMap getSuspends() {
        return this.suspends;
    }

    @java.lang.SuppressWarnings("all")
    public IntLongHashMap getOrdersBalances() {
        return this.ordersBalances;
    }

    @java.lang.SuppressWarnings("all")
    public IntLongHashMap getOpenInterestLong() {
        return this.openInterestLong;
    }

    @java.lang.SuppressWarnings("all")
    public IntLongHashMap getOpenInterestShort() {
        return this.openInterestShort;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
        return "TotalCurrencyBalanceReportResult(accountBalances=" + this.getAccountBalances() + ", fees=" + this.getFees() + ", adjustments=" + this.getAdjustments() + ", suspends=" + this.getSuspends() + ", ordersBalances=" + this.getOrdersBalances() + ", openInterestLong=" + this.getOpenInterestLong() + ", openInterestShort=" + this.getOpenInterestShort() + ")";
    }
}
