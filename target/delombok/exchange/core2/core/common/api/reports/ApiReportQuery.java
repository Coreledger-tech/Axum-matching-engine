// Generated by delombok at Wed Aug 14 23:30:16 PDT 2024
/*
 * Copyright 2019 Maksim Zheravin
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package exchange.core2.core.common.api.reports;

public final class ApiReportQuery {
    public long timestamp;
    // transfer unique id
    // can be constant unless going to push data concurrently
    public final int transferId;
    // serializable object
    public final ReportQuery<?> query;

    @Override
    public String toString() {
        return "[REPORT_QUERY tid=" + transferId + " query=" + query + "]";
    }

    @java.lang.SuppressWarnings("all")
    ApiReportQuery(final long timestamp, final int transferId, final ReportQuery<?> query) {
        this.timestamp = timestamp;
        this.transferId = transferId;
        this.query = query;
    }


    @java.lang.SuppressWarnings("all")
    public static class ApiReportQueryBuilder {
        @java.lang.SuppressWarnings("all")
        private long timestamp;
        @java.lang.SuppressWarnings("all")
        private int transferId;
        @java.lang.SuppressWarnings("all")
        private ReportQuery<?> query;

        @java.lang.SuppressWarnings("all")
        ApiReportQueryBuilder() {
        }

        @java.lang.SuppressWarnings("all")
        public ApiReportQuery.ApiReportQueryBuilder timestamp(final long timestamp) {
            this.timestamp = timestamp;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public ApiReportQuery.ApiReportQueryBuilder transferId(final int transferId) {
            this.transferId = transferId;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public ApiReportQuery.ApiReportQueryBuilder query(final ReportQuery<?> query) {
            this.query = query;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public ApiReportQuery build() {
            return new ApiReportQuery(this.timestamp, this.transferId, this.query);
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        public java.lang.String toString() {
            return "ApiReportQuery.ApiReportQueryBuilder(timestamp=" + this.timestamp + ", transferId=" + this.transferId + ", query=" + this.query + ")";
        }
    }

    @java.lang.SuppressWarnings("all")
    public static ApiReportQuery.ApiReportQueryBuilder builder() {
        return new ApiReportQuery.ApiReportQueryBuilder();
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof ApiReportQuery)) return false;
        final ApiReportQuery other = (ApiReportQuery) o;
        if (this.timestamp != other.timestamp) return false;
        if (this.transferId != other.transferId) return false;
        final java.lang.Object this$query = this.query;
        final java.lang.Object other$query = other.query;
        if (this$query == null ? other$query != null : !this$query.equals(other$query)) return false;
        return true;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final long $timestamp = this.timestamp;
        result = result * PRIME + (int) ($timestamp >>> 32 ^ $timestamp);
        result = result * PRIME + this.transferId;
        final java.lang.Object $query = this.query;
        result = result * PRIME + ($query == null ? 43 : $query.hashCode());
        return result;
    }
}
