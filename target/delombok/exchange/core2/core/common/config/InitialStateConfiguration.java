// Generated by delombok at Mon Jul 22 00:04:27 PDT 2024
package exchange.core2.core.common.config;

/**
 * Exchange initialization configuration
 * <p>
 * TODO use interface with different implementations for Clean, Snapshot, Journal
 */
public final class InitialStateConfiguration {
    public static InitialStateConfiguration DEFAULT = InitialStateConfiguration.cleanStart("MY_EXCHANGE");
    public static InitialStateConfiguration CLEAN_TEST = InitialStateConfiguration.cleanStart("EC0");
    /*
     * Exchange ID string.
     * Should not have special characters because it is used for file names.
     */
    private final String exchangeId;
    /*
     * SnapshotID to load.
     * Set to 0 fot clean start.
     */
    private final long snapshotId;
    private final long snapshotBaseSeq;
    /*
     * When loading from journal, it will stop replaying commands as soon as this timestamp reached.
     * Set to 0 to ignore the journal, or Long.MAX_VALUE to read full available journal (or until reading error).
     */
    private final long journalTimestampNs;
    /*
     * When requested loading from snapshot, and snapshot was not found - throw an exception,
     * if throwIfSnapshotNotFound true. Otherwise, will initialize empty exchange.
     */
    private final boolean throwIfSnapshotNotFound;

    // TODO ignore journal
    public boolean fromSnapshot() {
        return snapshotId != 0;
    }

    /**
     * Clean start configuration
     *
     * @param exchangeId Exchange ID
     * @return clean start configuration without journaling.
     */
    public static InitialStateConfiguration cleanStart(String exchangeId) {
        return InitialStateConfiguration.builder().exchangeId(exchangeId).snapshotId(0).build();
    }

    /**
     * Clean start configuration with journaling on.
     *
     * @param exchangeId Exchange ID
     * @return clean start configuration with journaling on.
     */
    public static InitialStateConfiguration cleanStartJournaling(String exchangeId) {
        return InitialStateConfiguration.builder().exchangeId(exchangeId).snapshotId(0).snapshotBaseSeq(0).throwIfSnapshotNotFound(true).build();
    }

    /**
     * Configuration that loads from snapshot, without journal replay with journaling off.
     *
     * @param exchangeId Exchange ID
     * @param snapshotId snapshot ID
     * @param baseSeq    bas seq
     * @return configuration that loads from snapshot, without journal replay with journaling off.
     */
    public static InitialStateConfiguration fromSnapshotOnly(String exchangeId, long snapshotId, long baseSeq) {
        return InitialStateConfiguration.builder().exchangeId(exchangeId).snapshotId(snapshotId).snapshotBaseSeq(baseSeq).throwIfSnapshotNotFound(true).build();
    }

    /**
     * Configuration that load exchange from last known state including journal replay till last known start. Journal is enabled.
     *
     * @param exchangeId Exchange ID
     * @param snapshotId snapshot ID
     * @param baseSeq    bas seq
     * @return configuration that load exchange from last known state including journal replay till last known start. Journal is enabled.
     * TODO how to recreate from the next journal section recorded after the first recovery?
     */
    public static InitialStateConfiguration lastKnownStateFromJournal(String exchangeId, long snapshotId, long baseSeq) {
        return InitialStateConfiguration.builder().exchangeId(exchangeId).snapshotId(snapshotId).snapshotBaseSeq(baseSeq).throwIfSnapshotNotFound(true).journalTimestampNs(Long.MAX_VALUE).build();
    }


    @java.lang.SuppressWarnings("all")
    public static class InitialStateConfigurationBuilder {
        @java.lang.SuppressWarnings("all")
        private String exchangeId;
        @java.lang.SuppressWarnings("all")
        private long snapshotId;
        @java.lang.SuppressWarnings("all")
        private long snapshotBaseSeq;
        @java.lang.SuppressWarnings("all")
        private long journalTimestampNs;
        @java.lang.SuppressWarnings("all")
        private boolean throwIfSnapshotNotFound;

        @java.lang.SuppressWarnings("all")
        InitialStateConfigurationBuilder() {
        }

        @java.lang.SuppressWarnings("all")
        public InitialStateConfiguration.InitialStateConfigurationBuilder exchangeId(final String exchangeId) {
            this.exchangeId = exchangeId;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public InitialStateConfiguration.InitialStateConfigurationBuilder snapshotId(final long snapshotId) {
            this.snapshotId = snapshotId;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public InitialStateConfiguration.InitialStateConfigurationBuilder snapshotBaseSeq(final long snapshotBaseSeq) {
            this.snapshotBaseSeq = snapshotBaseSeq;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public InitialStateConfiguration.InitialStateConfigurationBuilder journalTimestampNs(final long journalTimestampNs) {
            this.journalTimestampNs = journalTimestampNs;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public InitialStateConfiguration.InitialStateConfigurationBuilder throwIfSnapshotNotFound(final boolean throwIfSnapshotNotFound) {
            this.throwIfSnapshotNotFound = throwIfSnapshotNotFound;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public InitialStateConfiguration build() {
            return new InitialStateConfiguration(this.exchangeId, this.snapshotId, this.snapshotBaseSeq, this.journalTimestampNs, this.throwIfSnapshotNotFound);
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        public java.lang.String toString() {
            return "InitialStateConfiguration.InitialStateConfigurationBuilder(exchangeId=" + this.exchangeId + ", snapshotId=" + this.snapshotId + ", snapshotBaseSeq=" + this.snapshotBaseSeq + ", journalTimestampNs=" + this.journalTimestampNs + ", throwIfSnapshotNotFound=" + this.throwIfSnapshotNotFound + ")";
        }
    }

    @java.lang.SuppressWarnings("all")
    public static InitialStateConfiguration.InitialStateConfigurationBuilder builder() {
        return new InitialStateConfiguration.InitialStateConfigurationBuilder();
    }

    @java.lang.SuppressWarnings("all")
    public InitialStateConfiguration(final String exchangeId, final long snapshotId, final long snapshotBaseSeq, final long journalTimestampNs, final boolean throwIfSnapshotNotFound) {
        this.exchangeId = exchangeId;
        this.snapshotId = snapshotId;
        this.snapshotBaseSeq = snapshotBaseSeq;
        this.journalTimestampNs = journalTimestampNs;
        this.throwIfSnapshotNotFound = throwIfSnapshotNotFound;
    }

    @java.lang.SuppressWarnings("all")
    public String getExchangeId() {
        return this.exchangeId;
    }

    @java.lang.SuppressWarnings("all")
    public long getSnapshotId() {
        return this.snapshotId;
    }

    @java.lang.SuppressWarnings("all")
    public long getSnapshotBaseSeq() {
        return this.snapshotBaseSeq;
    }

    @java.lang.SuppressWarnings("all")
    public long getJournalTimestampNs() {
        return this.journalTimestampNs;
    }

    @java.lang.SuppressWarnings("all")
    public boolean isThrowIfSnapshotNotFound() {
        return this.throwIfSnapshotNotFound;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
        return "InitialStateConfiguration(exchangeId=" + this.getExchangeId() + ", snapshotId=" + this.getSnapshotId() + ", snapshotBaseSeq=" + this.getSnapshotBaseSeq() + ", journalTimestampNs=" + this.getJournalTimestampNs() + ", throwIfSnapshotNotFound=" + this.isThrowIfSnapshotNotFound() + ")";
    }
}
