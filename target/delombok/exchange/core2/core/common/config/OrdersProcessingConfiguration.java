// Generated by delombok at Thu Jul 18 23:53:52 PDT 2024
package exchange.core2.core.common.config;

/**
 * Order processing configuration
 */
public final class OrdersProcessingConfiguration {
    public static OrdersProcessingConfiguration DEFAULT = OrdersProcessingConfiguration.builder().riskProcessingMode(RiskProcessingMode.FULL_PER_CURRENCY).marginTradingMode(MarginTradingMode.MARGIN_TRADING_ENABLED).build();
    private final RiskProcessingMode riskProcessingMode;
    private final MarginTradingMode marginTradingMode;


    public enum RiskProcessingMode {
        // risk processing is on, every currency/asset account is checked independently
        FULL_PER_CURRENCY, 
        // risk processing is off, any orders accepted and placed
        NO_RISK_PROCESSING;
    }


    public enum MarginTradingMode {
        MARGIN_TRADING_DISABLED, MARGIN_TRADING_ENABLED;
    }


    @java.lang.SuppressWarnings("all")
    public static class OrdersProcessingConfigurationBuilder {
        @java.lang.SuppressWarnings("all")
        private RiskProcessingMode riskProcessingMode;
        @java.lang.SuppressWarnings("all")
        private MarginTradingMode marginTradingMode;

        @java.lang.SuppressWarnings("all")
        OrdersProcessingConfigurationBuilder() {
        }

        @java.lang.SuppressWarnings("all")
        public OrdersProcessingConfiguration.OrdersProcessingConfigurationBuilder riskProcessingMode(final RiskProcessingMode riskProcessingMode) {
            this.riskProcessingMode = riskProcessingMode;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public OrdersProcessingConfiguration.OrdersProcessingConfigurationBuilder marginTradingMode(final MarginTradingMode marginTradingMode) {
            this.marginTradingMode = marginTradingMode;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public OrdersProcessingConfiguration build() {
            return new OrdersProcessingConfiguration(this.riskProcessingMode, this.marginTradingMode);
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        public java.lang.String toString() {
            return "OrdersProcessingConfiguration.OrdersProcessingConfigurationBuilder(riskProcessingMode=" + this.riskProcessingMode + ", marginTradingMode=" + this.marginTradingMode + ")";
        }
    }

    @java.lang.SuppressWarnings("all")
    public static OrdersProcessingConfiguration.OrdersProcessingConfigurationBuilder builder() {
        return new OrdersProcessingConfiguration.OrdersProcessingConfigurationBuilder();
    }

    @java.lang.SuppressWarnings("all")
    public OrdersProcessingConfiguration(final RiskProcessingMode riskProcessingMode, final MarginTradingMode marginTradingMode) {
        this.riskProcessingMode = riskProcessingMode;
        this.marginTradingMode = marginTradingMode;
    }

    @java.lang.SuppressWarnings("all")
    public RiskProcessingMode getRiskProcessingMode() {
        return this.riskProcessingMode;
    }

    @java.lang.SuppressWarnings("all")
    public MarginTradingMode getMarginTradingMode() {
        return this.marginTradingMode;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
        return "OrdersProcessingConfiguration(riskProcessingMode=" + this.getRiskProcessingMode() + ", marginTradingMode=" + this.getMarginTradingMode() + ")";
    }
}
