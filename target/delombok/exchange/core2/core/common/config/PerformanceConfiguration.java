// Generated by delombok at Thu Nov 14 21:27:17 PST 2024
package exchange.core2.core.common.config;

import exchange.core2.core.common.CoreWaitStrategy;
import exchange.core2.core.orderbook.IOrderBook;
import exchange.core2.core.orderbook.OrderBookDirectImpl;
import exchange.core2.core.orderbook.OrderBookNaiveImpl;
import exchange.core2.core.utils.AffinityThreadFactory;
import net.jpountz.lz4.LZ4Compressor;
import net.jpountz.lz4.LZ4Factory;
import java.util.concurrent.ThreadFactory;
import java.util.function.Supplier;

/**
 * Exchange performance configuration
 */
public final class PerformanceConfiguration {
    public static final PerformanceConfiguration DEFAULT = PerformanceConfiguration.baseBuilder().build();
    /*
     * Disruptor ring buffer size (number of commands). Must be power of 2.
     */
    private final int ringBufferSize;
    /*
     * Number of matching engines. Each instance requires extra CPU core.
     */
    private final int matchingEnginesNum;
    /*
     * Number of risk engines. Each instance requires extra CPU core.
     */
    private final int riskEnginesNum;
    /*
     * max number of messages not processed by R2 stage. Must be less than quarter of ringBufferSize.
     * Lower values, like 100, provide better mean latency.
     * Higher values, like 2000 provide better throughput and tail latency.
     */
    private final int msgsInGroupLimit;
    /*
     * max interval when messages not processed by R2 stage.
     * Interfere with msgsInGroupLimit parameter.
     * Lower values, like 1000 (1us), provide better mean latency.
     * Higher values, like 2000 provide better throughput and tail latency.
     */
    private final int maxGroupDurationNs;
    /*
     * send L2 for every successfully executed command
     *
     * Regular L2 updates is important for Risk Processor, to evaluate PnL for margin trading.
     * By default (false), Matching Engine sends L2 only when requested by Grouping Processor (every 10ms).
     * When true - L2 data will be sent for every successfully executed command.
     * Enabling this will impact the performance.
     *
     */
    private final boolean sendL2ForEveryCmd;
    /*
     * Depth of Regular L2 updates.
     * Default is 8 (sufficient for Risk Processor because it does not check order book depth)
     * If set Integer.MAX_VALUE - full order book will be sent.
     */
    private final int l2RefreshDepth;
    /*
     * Disruptor threads factory
     */
    private final ThreadFactory threadFactory;
    /*
     * Disruptor wait strategy
     */
    private final CoreWaitStrategy waitStrategy;
    /*
     * Order books factory
     */
    private final IOrderBook.OrderBookFactory orderBookFactory;
    /*
     * LZ4 compressor factory for binary commands and reports
     */
    private final Supplier<LZ4Compressor> binaryCommandsLz4CompressorFactory;

    @Override
    public String toString() {
        return "PerformanceConfiguration{ringBufferSize=" + ringBufferSize + ", matchingEnginesNum=" + matchingEnginesNum + ", riskEnginesNum=" + riskEnginesNum + ", msgsInGroupLimit=" + msgsInGroupLimit + ", maxGroupDurationNs=" + maxGroupDurationNs + ", sendL2ForEveryCmd=" + sendL2ForEveryCmd + ", l2RefreshDepth=" + l2RefreshDepth + ", threadFactory=" + (threadFactory == null ? null : threadFactory.getClass().getSimpleName()) + ", waitStrategy=" + waitStrategy + ", orderBookFactory=" + (orderBookFactory == null ? null : orderBookFactory.getClass().getSimpleName()) + ", binaryCommandsLz4CompressorFactory=" + (binaryCommandsLz4CompressorFactory == null ? null : binaryCommandsLz4CompressorFactory.getClass().getSimpleName()) + '}';
    }

    // TODO add expected number of users and symbols
    public static PerformanceConfiguration.PerformanceConfigurationBuilder baseBuilder() {
        return builder().ringBufferSize(16 * 1024).matchingEnginesNum(1).riskEnginesNum(1).msgsInGroupLimit(256).maxGroupDurationNs(10000).sendL2ForEveryCmd(false).l2RefreshDepth(8).threadFactory(Thread::new).waitStrategy(CoreWaitStrategy.BLOCKING).binaryCommandsLz4CompressorFactory(() -> LZ4Factory.fastestInstance().highCompressor()).orderBookFactory(OrderBookNaiveImpl::new);
    }

    public static PerformanceConfiguration.PerformanceConfigurationBuilder latencyPerformanceBuilder() {
        return builder().ringBufferSize(2 * 1024).matchingEnginesNum(1).riskEnginesNum(1).msgsInGroupLimit(256).maxGroupDurationNs(10000).sendL2ForEveryCmd(false).l2RefreshDepth(8).threadFactory(new AffinityThreadFactory(AffinityThreadFactory.ThreadAffinityMode.THREAD_AFFINITY_ENABLE_PER_LOGICAL_CORE)).waitStrategy(CoreWaitStrategy.BUSY_SPIN).binaryCommandsLz4CompressorFactory(() -> LZ4Factory.fastestInstance().highCompressor()).orderBookFactory(OrderBookDirectImpl::new);
    }

    public static PerformanceConfiguration.PerformanceConfigurationBuilder throughputPerformanceBuilder() {
        return builder().ringBufferSize(64 * 1024).matchingEnginesNum(4).riskEnginesNum(2).msgsInGroupLimit(4096).maxGroupDurationNs(4000000).sendL2ForEveryCmd(false).l2RefreshDepth(8).threadFactory(new AffinityThreadFactory(AffinityThreadFactory.ThreadAffinityMode.THREAD_AFFINITY_ENABLE_PER_LOGICAL_CORE)).waitStrategy(CoreWaitStrategy.BUSY_SPIN).binaryCommandsLz4CompressorFactory(() -> LZ4Factory.fastestInstance().highCompressor()).orderBookFactory(OrderBookDirectImpl::new);
    }


    @java.lang.SuppressWarnings("all")
    public static class PerformanceConfigurationBuilder {
        @java.lang.SuppressWarnings("all")
        private int ringBufferSize;
        @java.lang.SuppressWarnings("all")
        private int matchingEnginesNum;
        @java.lang.SuppressWarnings("all")
        private int riskEnginesNum;
        @java.lang.SuppressWarnings("all")
        private int msgsInGroupLimit;
        @java.lang.SuppressWarnings("all")
        private int maxGroupDurationNs;
        @java.lang.SuppressWarnings("all")
        private boolean sendL2ForEveryCmd;
        @java.lang.SuppressWarnings("all")
        private int l2RefreshDepth;
        @java.lang.SuppressWarnings("all")
        private ThreadFactory threadFactory;
        @java.lang.SuppressWarnings("all")
        private CoreWaitStrategy waitStrategy;
        @java.lang.SuppressWarnings("all")
        private IOrderBook.OrderBookFactory orderBookFactory;
        @java.lang.SuppressWarnings("all")
        private Supplier<LZ4Compressor> binaryCommandsLz4CompressorFactory;

        @java.lang.SuppressWarnings("all")
        PerformanceConfigurationBuilder() {
        }

        @java.lang.SuppressWarnings("all")
        public PerformanceConfiguration.PerformanceConfigurationBuilder ringBufferSize(final int ringBufferSize) {
            this.ringBufferSize = ringBufferSize;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public PerformanceConfiguration.PerformanceConfigurationBuilder matchingEnginesNum(final int matchingEnginesNum) {
            this.matchingEnginesNum = matchingEnginesNum;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public PerformanceConfiguration.PerformanceConfigurationBuilder riskEnginesNum(final int riskEnginesNum) {
            this.riskEnginesNum = riskEnginesNum;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public PerformanceConfiguration.PerformanceConfigurationBuilder msgsInGroupLimit(final int msgsInGroupLimit) {
            this.msgsInGroupLimit = msgsInGroupLimit;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public PerformanceConfiguration.PerformanceConfigurationBuilder maxGroupDurationNs(final int maxGroupDurationNs) {
            this.maxGroupDurationNs = maxGroupDurationNs;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public PerformanceConfiguration.PerformanceConfigurationBuilder sendL2ForEveryCmd(final boolean sendL2ForEveryCmd) {
            this.sendL2ForEveryCmd = sendL2ForEveryCmd;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public PerformanceConfiguration.PerformanceConfigurationBuilder l2RefreshDepth(final int l2RefreshDepth) {
            this.l2RefreshDepth = l2RefreshDepth;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public PerformanceConfiguration.PerformanceConfigurationBuilder threadFactory(final ThreadFactory threadFactory) {
            this.threadFactory = threadFactory;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public PerformanceConfiguration.PerformanceConfigurationBuilder waitStrategy(final CoreWaitStrategy waitStrategy) {
            this.waitStrategy = waitStrategy;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public PerformanceConfiguration.PerformanceConfigurationBuilder orderBookFactory(final IOrderBook.OrderBookFactory orderBookFactory) {
            this.orderBookFactory = orderBookFactory;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public PerformanceConfiguration.PerformanceConfigurationBuilder binaryCommandsLz4CompressorFactory(final Supplier<LZ4Compressor> binaryCommandsLz4CompressorFactory) {
            this.binaryCommandsLz4CompressorFactory = binaryCommandsLz4CompressorFactory;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public PerformanceConfiguration build() {
            return new PerformanceConfiguration(this.ringBufferSize, this.matchingEnginesNum, this.riskEnginesNum, this.msgsInGroupLimit, this.maxGroupDurationNs, this.sendL2ForEveryCmd, this.l2RefreshDepth, this.threadFactory, this.waitStrategy, this.orderBookFactory, this.binaryCommandsLz4CompressorFactory);
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        public java.lang.String toString() {
            return "PerformanceConfiguration.PerformanceConfigurationBuilder(ringBufferSize=" + this.ringBufferSize + ", matchingEnginesNum=" + this.matchingEnginesNum + ", riskEnginesNum=" + this.riskEnginesNum + ", msgsInGroupLimit=" + this.msgsInGroupLimit + ", maxGroupDurationNs=" + this.maxGroupDurationNs + ", sendL2ForEveryCmd=" + this.sendL2ForEveryCmd + ", l2RefreshDepth=" + this.l2RefreshDepth + ", threadFactory=" + this.threadFactory + ", waitStrategy=" + this.waitStrategy + ", orderBookFactory=" + this.orderBookFactory + ", binaryCommandsLz4CompressorFactory=" + this.binaryCommandsLz4CompressorFactory + ")";
        }
    }

    @java.lang.SuppressWarnings("all")
    public static PerformanceConfiguration.PerformanceConfigurationBuilder builder() {
        return new PerformanceConfiguration.PerformanceConfigurationBuilder();
    }

    @java.lang.SuppressWarnings("all")
    public PerformanceConfiguration(final int ringBufferSize, final int matchingEnginesNum, final int riskEnginesNum, final int msgsInGroupLimit, final int maxGroupDurationNs, final boolean sendL2ForEveryCmd, final int l2RefreshDepth, final ThreadFactory threadFactory, final CoreWaitStrategy waitStrategy, final IOrderBook.OrderBookFactory orderBookFactory, final Supplier<LZ4Compressor> binaryCommandsLz4CompressorFactory) {
        this.ringBufferSize = ringBufferSize;
        this.matchingEnginesNum = matchingEnginesNum;
        this.riskEnginesNum = riskEnginesNum;
        this.msgsInGroupLimit = msgsInGroupLimit;
        this.maxGroupDurationNs = maxGroupDurationNs;
        this.sendL2ForEveryCmd = sendL2ForEveryCmd;
        this.l2RefreshDepth = l2RefreshDepth;
        this.threadFactory = threadFactory;
        this.waitStrategy = waitStrategy;
        this.orderBookFactory = orderBookFactory;
        this.binaryCommandsLz4CompressorFactory = binaryCommandsLz4CompressorFactory;
    }

    @java.lang.SuppressWarnings("all")
    public int getRingBufferSize() {
        return this.ringBufferSize;
    }

    @java.lang.SuppressWarnings("all")
    public int getMatchingEnginesNum() {
        return this.matchingEnginesNum;
    }

    @java.lang.SuppressWarnings("all")
    public int getRiskEnginesNum() {
        return this.riskEnginesNum;
    }

    @java.lang.SuppressWarnings("all")
    public int getMsgsInGroupLimit() {
        return this.msgsInGroupLimit;
    }

    @java.lang.SuppressWarnings("all")
    public int getMaxGroupDurationNs() {
        return this.maxGroupDurationNs;
    }

    @java.lang.SuppressWarnings("all")
    public boolean isSendL2ForEveryCmd() {
        return this.sendL2ForEveryCmd;
    }

    @java.lang.SuppressWarnings("all")
    public int getL2RefreshDepth() {
        return this.l2RefreshDepth;
    }

    @java.lang.SuppressWarnings("all")
    public ThreadFactory getThreadFactory() {
        return this.threadFactory;
    }

    @java.lang.SuppressWarnings("all")
    public CoreWaitStrategy getWaitStrategy() {
        return this.waitStrategy;
    }

    @java.lang.SuppressWarnings("all")
    public IOrderBook.OrderBookFactory getOrderBookFactory() {
        return this.orderBookFactory;
    }

    @java.lang.SuppressWarnings("all")
    public Supplier<LZ4Compressor> getBinaryCommandsLz4CompressorFactory() {
        return this.binaryCommandsLz4CompressorFactory;
    }
}
