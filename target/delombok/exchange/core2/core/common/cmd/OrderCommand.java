// Generated by delombok at Tue Oct 22 23:49:50 PDT 2024
/*
 * Copyright 2019 Maksim Zheravin
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package exchange.core2.core.common.cmd;

import exchange.core2.core.common.*;
import lombok.*;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Consumer;

public final class OrderCommand implements IOrder {
    public OrderCommandType command;
    public long orderId;
    public int symbol;
    public long price;
    public long size;
    // new orders INPUT - reserved price for fast moves of GTC bid orders in exchange mode
    public long reserveBidPrice;
    // required for PLACE_ORDER only;
    // for CANCEL/MOVE contains original order action (filled by orderbook)
    public OrderAction action;
    public OrderType orderType;
    public long uid;
    public long timestamp;
    public int userCookie;
    // filled by grouping processor:
    public long eventsGroup;
    public int serviceFlags;
    // result code of command execution - can also be used for saving intermediate state
    public CommandResultCode resultCode;
    // trade events chain
    public MatcherTradeEvent matcherEvent;
    // optional market data
    public L2MarketData marketData;

    // sequence of last available for this command
    //public long matcherEventSequence;
    // ---- potential false sharing section ------
    public static OrderCommand newOrder(OrderType orderType, long orderId, long uid, long price, long reserveBidPrice, long size, OrderAction action) {
        OrderCommand cmd = new OrderCommand();
        cmd.command = OrderCommandType.PLACE_ORDER;
        cmd.orderId = orderId;
        cmd.uid = uid;
        cmd.price = price;
        cmd.reserveBidPrice = reserveBidPrice;
        cmd.size = size;
        cmd.action = action;
        cmd.orderType = orderType;
        cmd.resultCode = CommandResultCode.VALID_FOR_MATCHING_ENGINE;
        return cmd;
    }

    public static OrderCommand cancel(long orderId, long uid) {
        OrderCommand cmd = new OrderCommand();
        cmd.command = OrderCommandType.CANCEL_ORDER;
        cmd.orderId = orderId;
        cmd.uid = uid;
        cmd.resultCode = CommandResultCode.VALID_FOR_MATCHING_ENGINE;
        return cmd;
    }

    public static OrderCommand reduce(long orderId, long uid, long reduceSize) {
        OrderCommand cmd = new OrderCommand();
        cmd.command = OrderCommandType.REDUCE_ORDER;
        cmd.orderId = orderId;
        cmd.uid = uid;
        cmd.size = reduceSize;
        cmd.resultCode = CommandResultCode.VALID_FOR_MATCHING_ENGINE;
        return cmd;
    }

    public static OrderCommand update(long orderId, long uid, long price) {
        OrderCommand cmd = new OrderCommand();
        cmd.command = OrderCommandType.MOVE_ORDER;
        cmd.orderId = orderId;
        cmd.uid = uid;
        cmd.price = price;
        cmd.resultCode = CommandResultCode.VALID_FOR_MATCHING_ENGINE;
        return cmd;
    }

    /**
     * Handles full MatcherTradeEvent chain, without removing/revoking them
     *
     * @param handler - MatcherTradeEvent handler
     */
    public void processMatcherEvents(Consumer<MatcherTradeEvent> handler) {
        MatcherTradeEvent mte = this.matcherEvent;
        while (mte != null) {
            handler.accept(mte);
            mte = mte.nextEvent;
        }
    }

    /**
     * Produces garbage
     * For testing only !!!
     *
     * @return list of events
     */
    public List<MatcherTradeEvent> extractEvents() {
        List<MatcherTradeEvent> list = new ArrayList<>();
        processMatcherEvents(list::add);
        return list;
    }

    // Traverse and remove:
//    private void cleanMatcherEvents() {
//        MatcherTradeEvent ev = this.matcherEvent;
//        this.matcherEvent = null;
//        while (ev != null) {
//            MatcherTradeEvent tmp = ev;
//            ev = ev.nextEvent;
//            tmp.nextEvent = null;
//        }
//    }
//
    /**
     * Write only command data, not status or events
     *
     * @param cmd2 command to overwrite to
     */
    public void writeTo(OrderCommand cmd2) {
        cmd2.command = this.command;
        cmd2.orderId = this.orderId;
        cmd2.symbol = this.symbol;
        cmd2.uid = this.uid;
        cmd2.timestamp = this.timestamp;
        cmd2.reserveBidPrice = this.reserveBidPrice;
        cmd2.price = this.price;
        cmd2.size = this.size;
        cmd2.action = this.action;
        cmd2.orderType = this.orderType;
    }

    // slow - testing only
    public OrderCommand copy() {
        OrderCommand newCmd = new OrderCommand();
        writeTo(newCmd);
        newCmd.resultCode = this.resultCode;
        List<MatcherTradeEvent> events = extractEvents();
//        System.out.println(">>> events: " + events);
        for (MatcherTradeEvent event : events) {
            MatcherTradeEvent copy = event.copy();
            copy.nextEvent = newCmd.matcherEvent;
            newCmd.matcherEvent = copy;
//            System.out.println(">>> newCmd.matcherEvent: " + newCmd.matcherEvent);
        }
        if (marketData != null) {
            newCmd.marketData = marketData.copy();
        }
//        System.out.println(">>> newCmd: " + newCmd);
        return newCmd;
    }

    @Override
    public long getFilled() {
        return 0;
    }

    @Override
    public int stateHash() {
        throw new UnsupportedOperationException("Command does not represents state");
    }


    @java.lang.SuppressWarnings("all")
    public static class OrderCommandBuilder {
        @java.lang.SuppressWarnings("all")
        private OrderCommandType command;
        @java.lang.SuppressWarnings("all")
        private long orderId;
        @java.lang.SuppressWarnings("all")
        private int symbol;
        @java.lang.SuppressWarnings("all")
        private long price;
        @java.lang.SuppressWarnings("all")
        private long size;
        @java.lang.SuppressWarnings("all")
        private long reserveBidPrice;
        @java.lang.SuppressWarnings("all")
        private OrderAction action;
        @java.lang.SuppressWarnings("all")
        private OrderType orderType;
        @java.lang.SuppressWarnings("all")
        private long uid;
        @java.lang.SuppressWarnings("all")
        private long timestamp;
        @java.lang.SuppressWarnings("all")
        private int userCookie;
        @java.lang.SuppressWarnings("all")
        private long eventsGroup;
        @java.lang.SuppressWarnings("all")
        private int serviceFlags;
        @java.lang.SuppressWarnings("all")
        private CommandResultCode resultCode;
        @java.lang.SuppressWarnings("all")
        private MatcherTradeEvent matcherEvent;
        @java.lang.SuppressWarnings("all")
        private L2MarketData marketData;

        @java.lang.SuppressWarnings("all")
        OrderCommandBuilder() {
        }

        @java.lang.SuppressWarnings("all")
        public OrderCommand.OrderCommandBuilder command(final OrderCommandType command) {
            this.command = command;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public OrderCommand.OrderCommandBuilder orderId(final long orderId) {
            this.orderId = orderId;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public OrderCommand.OrderCommandBuilder symbol(final int symbol) {
            this.symbol = symbol;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public OrderCommand.OrderCommandBuilder price(final long price) {
            this.price = price;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public OrderCommand.OrderCommandBuilder size(final long size) {
            this.size = size;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public OrderCommand.OrderCommandBuilder reserveBidPrice(final long reserveBidPrice) {
            this.reserveBidPrice = reserveBidPrice;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public OrderCommand.OrderCommandBuilder action(final OrderAction action) {
            this.action = action;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public OrderCommand.OrderCommandBuilder orderType(final OrderType orderType) {
            this.orderType = orderType;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public OrderCommand.OrderCommandBuilder uid(final long uid) {
            this.uid = uid;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public OrderCommand.OrderCommandBuilder timestamp(final long timestamp) {
            this.timestamp = timestamp;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public OrderCommand.OrderCommandBuilder userCookie(final int userCookie) {
            this.userCookie = userCookie;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public OrderCommand.OrderCommandBuilder eventsGroup(final long eventsGroup) {
            this.eventsGroup = eventsGroup;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public OrderCommand.OrderCommandBuilder serviceFlags(final int serviceFlags) {
            this.serviceFlags = serviceFlags;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public OrderCommand.OrderCommandBuilder resultCode(final CommandResultCode resultCode) {
            this.resultCode = resultCode;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public OrderCommand.OrderCommandBuilder matcherEvent(final MatcherTradeEvent matcherEvent) {
            this.matcherEvent = matcherEvent;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public OrderCommand.OrderCommandBuilder marketData(final L2MarketData marketData) {
            this.marketData = marketData;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public OrderCommand build() {
            return new OrderCommand(this.command, this.orderId, this.symbol, this.price, this.size, this.reserveBidPrice, this.action, this.orderType, this.uid, this.timestamp, this.userCookie, this.eventsGroup, this.serviceFlags, this.resultCode, this.matcherEvent, this.marketData);
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        public java.lang.String toString() {
            return "OrderCommand.OrderCommandBuilder(command=" + this.command + ", orderId=" + this.orderId + ", symbol=" + this.symbol + ", price=" + this.price + ", size=" + this.size + ", reserveBidPrice=" + this.reserveBidPrice + ", action=" + this.action + ", orderType=" + this.orderType + ", uid=" + this.uid + ", timestamp=" + this.timestamp + ", userCookie=" + this.userCookie + ", eventsGroup=" + this.eventsGroup + ", serviceFlags=" + this.serviceFlags + ", resultCode=" + this.resultCode + ", matcherEvent=" + this.matcherEvent + ", marketData=" + this.marketData + ")";
        }
    }

    @java.lang.SuppressWarnings("all")
    public static OrderCommand.OrderCommandBuilder builder() {
        return new OrderCommand.OrderCommandBuilder();
    }

    @java.lang.SuppressWarnings("all")
    public OrderCommand() {
    }

    @java.lang.SuppressWarnings("all")
    public OrderCommand(final OrderCommandType command, final long orderId, final int symbol, final long price, final long size, final long reserveBidPrice, final OrderAction action, final OrderType orderType, final long uid, final long timestamp, final int userCookie, final long eventsGroup, final int serviceFlags, final CommandResultCode resultCode, final MatcherTradeEvent matcherEvent, final L2MarketData marketData) {
        this.command = command;
        this.orderId = orderId;
        this.symbol = symbol;
        this.price = price;
        this.size = size;
        this.reserveBidPrice = reserveBidPrice;
        this.action = action;
        this.orderType = orderType;
        this.uid = uid;
        this.timestamp = timestamp;
        this.userCookie = userCookie;
        this.eventsGroup = eventsGroup;
        this.serviceFlags = serviceFlags;
        this.resultCode = resultCode;
        this.matcherEvent = matcherEvent;
        this.marketData = marketData;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
        return "OrderCommand(command=" + this.command + ", orderId=" + this.getOrderId() + ", symbol=" + this.symbol + ", price=" + this.getPrice() + ", size=" + this.getSize() + ", reserveBidPrice=" + this.getReserveBidPrice() + ", action=" + this.getAction() + ", orderType=" + this.orderType + ", uid=" + this.getUid() + ", timestamp=" + this.getTimestamp() + ", userCookie=" + this.userCookie + ", eventsGroup=" + this.eventsGroup + ", serviceFlags=" + this.serviceFlags + ", resultCode=" + this.resultCode + ", matcherEvent=" + this.matcherEvent + ", marketData=" + this.marketData + ")";
    }

    @java.lang.SuppressWarnings("all")
    public long getOrderId() {
        return this.orderId;
    }

    @java.lang.SuppressWarnings("all")
    public long getPrice() {
        return this.price;
    }

    @java.lang.SuppressWarnings("all")
    public long getSize() {
        return this.size;
    }

    @java.lang.SuppressWarnings("all")
    public long getReserveBidPrice() {
        return this.reserveBidPrice;
    }

    @java.lang.SuppressWarnings("all")
    public OrderAction getAction() {
        return this.action;
    }

    @java.lang.SuppressWarnings("all")
    public long getUid() {
        return this.uid;
    }

    @java.lang.SuppressWarnings("all")
    public long getTimestamp() {
        return this.timestamp;
    }
}
